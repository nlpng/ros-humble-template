name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  ROS_DISTRO: humble

jobs:
  build-and-test:
    runs-on: ubuntu-22.04
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup ROS 2 Humble
      uses: ros-tooling/setup-ros@v0.7
      with:
        required-ros-distributions: humble
    
    - name: Install dependencies
      run: |
        sudo apt-get update && sudo apt-get install -y \
          python3-colcon-common-extensions \
          python3-rosdep \
          ros-humble-diagnostic-msgs \
          ros-humble-foxglove-bridge
        
        sudo rosdep init || echo "rosdep already initialized"
        rosdep update
        rosdep install --from-paths src --ignore-src -r -y
    
    - name: Build both packages
      run: |
        source /opt/ros/humble/setup.bash
        colcon build --cmake-args -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=ON
    
    - name: Run tests
      run: |
        source /opt/ros/humble/setup.bash
        source install/setup.bash
        colcon test
        colcon test-result --verbose
  
  docker-test:
    runs-on: ubuntu-22.04
    needs: build-and-test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build and test Docker
      run: |
        # Build image
        docker build -t ros-template:humble .
        
        # Test default profile with health monitoring
        docker compose up -d
        sleep 20
        
        # Check container is healthy
        CONTAINER=$(docker compose ps -q)
        docker exec $CONTAINER ros2 node list | grep -q template_node
        docker exec $CONTAINER ros2 topic list | grep -q "/template/health"
        docker exec $CONTAINER timeout 10 ros2 topic echo /template/health --once >/dev/null
        
        echo "âœ… Docker health monitoring working"
        docker compose down
  
  code-quality:
    runs-on: ubuntu-22.04
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install linting tools
      run: |
        sudo apt-get update && sudo apt-get install -y clang-format
        pip3 install black
    
    - name: Check C++ formatting
      run: |
        find src/ros_template_node -name "*.cpp" -o -name "*.hpp" | \
          xargs clang-format --dry-run --Werror
    
    - name: Check Python formatting
      run: |
        python3 -m black --check src/py_template_node/
